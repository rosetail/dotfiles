* users and stuff
- /etc/passwd format: user01:x:1000:1000:User One:/home/user01:/bin/bash
  1. username
  2. used to be encrypted passwd, now just x. passwd moved to /etc/shadow
  3. UID
  4. GID (usually same as UID, for primary group)
  5. real name
  6. home dir
  7. login shell (/bin/nologin if interactive use not allowed)
- /etc/group format: group01:x:10000:user01,user02
  1. group name
  2. used to be passwd
  3. GID
  4. user list
- UID's:
  - 0 is root
  - 1-200 is system users (for daemons and such)
  - 201-999 is less privileged system users
  - 1000+ is regular users
- /etc/shadow format: user03:<hash goes here>:17933:0:99999:7:2:18119:
  1. username
  2. encrypted password
  3. date password last changed (in days since epoch)
  4. min days after passwd change that the passwwd can be changed again
  5. max days until passwd expires (empty for no expiry)
  6. num of warning days before passwd expiry
  7. num of inactivity days after password expiry before account is locked
  8. account expiry date (in days since epoch). empty for no expiry
  9. reserved for future use
- use ~chage~ to set passwd expiry options
  - ~chage -d 0 user03~ to make user change passwd on next login
- lock accounts with usermod
- /etc/login.defs for new user settings
* file permissions
- ls -l output: first ownership name is user, second is group
- ~chmod go+rwx~ to change permissions for group members and others
- + for add, - to remove, = to set to exactly
- u for current user, g for group, o for other, a for all
- prefix groups with colon ie :wheel
- sticky bit:
  - u+s: executes file as user that is owner, not current user (suid)
  - g+s: executes file as group that is owner, not current user (sgid), if dir, new files are owned by same group as dir, not the creator's group
  - o+t: on dir: users with write access can only write to files they own
- umask: default permissions on new files. Setting a bit makes new files not have that permission
* processes
- process states:
  - R: running
  - Sleep states:
    - S: interruptible (waiting for a syscall or signal or something)
    - D: uninterruptible (like S but doesn't respond to signals)
    - K: killable (D but will respond to kill signal)
    - I: report_idle (D but for kernel threads)
  - T: stopped or traced (traced = stacktrace)
  - Z: exit_zombie
  - X: exit_dead (after zombie is reaped)
- ps output:
  - ps lax is ps aux but long form
  - bracketed processes are kernel threads
  - jobs or ps j to list jobs
  - fg %n to bring specific task to fg
- process signals:
  1. HUP (hangup): report program end to terminal. Also, request config reload without termination
  2. INT (keyboard interrupt)
  3. QUIT (keyboard quit) INT but dumps core (can do with C-\)
  4. KILL unblockable
  5. TERM (terminate) default kill option. allows for cleanup
  6. CONT (continue) resumes a process. can't be blocked
  7. STOP suspends process. can't be blocked
  8. TSTP (keyboard stop) like stop, but can be handled or ignored
- kill -l shows available signals with their numbers
- can use %n with kill for background jobs
- pkill kills all processes with substring-matched command names
- pkill with options can kill processes by owner, user, group, or terminal
- w lists logged in users
- log out other users with pkill, either by user or by location of their terminal session
- /dev/pts/n is for gui terminals
- VIRT memory shows all memory/swap a process including libs is using
- RES shows only physical memory
* daemons
- service files start daemons
- socket files (.socket endings) used for inter-process communication
- path files (.path) delay activation of service until specific file system change occurs
- systemctl list-unit-files --type=service lists active services
- servics statuses:
  - loaded: loaded to memory
  - active: if it's running (and if so, how long)
  - main PID: PID
  - status: additional info
- service states:
  - loaded: config file processed
  - active (running)
  - active (exited): successfully complete 1-time configuration
  - active (waiting): running but waiting for an event
  - inactive
  - enabled: is started at boot
  - disabled
  - static: can't be enabled but can be started by an enabled unit
- systemctl --failed --type=service shows failed services
- check status with is-active, is-enabled, and is-failed
- systemctl reload to reload config
- systemctl reload-or-restart will restart if unable to reload config
- systemctl list-dependencies shows deps tree
  - use --reverse for rdeps
- systemctl mask is like masking a package in portage
- systemctl unmask to unmask
* ssh
the message about failing to establish authenticity the first time you ssh is because the server's pubkey isn't in ~/.ssh/known_hosts, so the connection might have been hijacked
- if the warning happens, add the server's /etc/ssh/ssh/ssh_host_*key.pub to your known hosts file
- create keys with ssh-keygen
- copy over keys with ssh-copy-id user@host
  - use -i to specify which key
- start ssh-agent with eval $(ssh-agent)
  - use ssh-add to make ssh-agent use your keys
- ssh -i to specify which key (aka id) to use
- config file is /etc/ssh/sshd_config
  - PermitRootLogin no
  - PasswordAuthentication no disables passwords. you must use pubkey instead. First, make sure new users can get their pubkey on the server
  - update with systemctl reload sshd
* syslog
- paths:
  - /var/log/messages: most messages here
  - /var/log/secure: security/auth
  - /var/log/maillog: mail
  - /var/log/cron: cron
  - /var/log/boot.log: boot
- logrotate will rotate log files so they don't take up too much space
- use logger command to manually add log entries
- use journalctl to see logs
  - -n 5 for last 5 entries
  - -f is like tail -f
  - -p for priority [debug,info,notice,warning,err,crit,alert,emerg]
  - --since today for today's records
  - --until is opposite of since
  - -o verbose to show other fields
  - -b 3 to show last 3 boot cycles
  - can use jouralctl _COMM=foo (or other fields listed under -o verbose)
- journals are kept in /run/log/journal
- config file is /etc/systemd/journald.conf
  - Storage parameter in conf file defines how to store journals
    - can be persistent, volatile (cleared on boot), or auto (persistent only if /var/log/journal directory exists), or none (drop all logs)
  - persistent journals will slowly be deleted over time
  - run systemctl restart systemd-journald after this
- use timedatectl to set time and stuff
- chronyd will help to keep hardware clock at the right time
* networking
- tcp/ip model
  - has 4 layers:
    - application: https/ftp/ssh and other such protocols used on the program levels
    - transport: tcp/udp (tcp is the reliable one)
    - internet: ipv4/6 protocols
    - link: physical hardware (usually ethernet or wlan)
- interface names
  - types:
    - en=ethernet
    - wl=wlan
    - ww=wwan
  - after type comes:
    - O3 (capital o): 3rd onboard device
    - S2: PCI hotplug slot 2
    - p5s0: PCI device 5 on slot 0
- ipv4
  - normal ip addresses
  - 2 parts: network and host (ips with same network part are on the same subnet)
  - lowest address on subnet (all of the host part are 0s) is called the network address
  - highest address is to send messages and is called broadcast address
  - netmask says how many bits of an address belong to the subnet
    - 2 syntaxes:
      - old syntax just uses 24 bits for network part and reads 255.255.0
      - new syntax (cidr) is /N, wher N is the number of bits for the subnet
    - example
      - host: 10.1.1.8
      - netmask: /8 (or 255.0.0.0)
      - calculations:
        - network address: 10.0.0.0
        - broadcast address: 10.255.255.255
  - ipv4 routing
    - hosts have routing tables that work like maps for where to send the traffic to
      - routing tables work like a hash map that includes destination network, interface, and the ips of any intermediate routers needed to route through
      - if the router can't find the destination for the traffic, it'll route it back to the full internet on another router that has access
    - DHCP can help a server auto-configure network by getting settings from the link, or you can manually set up static settings
- ipv6
  - 128 bit addresses, in groups of 4 hex digits separated by colons
  - there are many leading 0s in groups, so they can be omitted
  - multiple sequences of 0's can be represented by :: (but only once per ip address)
  - when specifying a port, keep the ip in brackets so you can tell that the port isn't part of the address
  - 2 part: network prefix (1st 64) and interface id (last 64). network prefix is the subnet
  - special addresses:
    - ::1/128 - localhost
    - :: - unspecified (listening on all configured IPs)
    - ::/0 - default route
    - 2000::/3 - global unicast addr (all normal ips are from this space)
    - fd00::/8 - unique local address (only for intranet use)
    - ff00::/8 - multicast (transmits to multiple hosts at once. used as ipv6 version of broadcast address)
    - fe80::/10 - link-local unicast that talks to hosts on a specific link as opposed to subnet
  - ipv6 configuration
    - dhcpv6 works like dhcp
    - manual configuration works too
    - slaac will auto configure through router advertisements
- ip link show shows available network interfaces
- ip addr show [interface name] for more
  - link/ether is the mac address
  - inet is ipv4 address plus its prefix and scope
  - inet6 is ipv6 address
  - 2nd inet6 is local ipv6 address
- ip -s link show to see performance (RX means received and TX means transmitted)
- ip route shows ipv4 routing table (add -6 for ipv6)
- tracepath or traceroute shows where the packet goes (use -6 for ipv6)
- ss (replacement for netstat) shows socket statistics
  - ss -ta output:
    -*:ssh - listening to all ssh ports
    172.25.250.10:ssh - ssh connection with that ip
  - opteons:
  - -l for listening
  - -n for numbers instead of names
  - -t for tcp only
  - -u for udp only
  - -a for allowed
  - -p for process using the sockets
  - -A (look it up)
- nmcli
  - settings in /etc/sysconfig/network-scripts
  - nmcli dev status to show network devices
  - nmcli con show to get list of connections. --active shows only active ones
  - nmcli con add con-name foo type ethernet ifname eno2
    - add connection for eno2 device named foo getting settings from dhcp
    - add ipv4.address foo to make it have static ip of foo
    - nmcli con up foo to activate connection
    - nmcli dev dis wlp5s0 to disconnect that interface
      - you should use this because nmcli con down will have it auto reconnect
  - nmcli con show <connectionName> will list all properties
  - nmcli con mod <connectionName> property val will modify a connection
    - when changing dhcp to static, set ipv4.method to manual, or ipv6.method to manual
  - nmcli con del to delete connection
  - nmcli con reload to reload conf files after they were edited by hand
- changing the hostname
  - run hostnamectl set-hostname foo
- stub resolver gets ips from hostnames
  - looks in paths listed in /etc/nsswitch.conf
  - starts with /etc/hosts
    - format is ip host1 host2 host3... where hostn is any hostname to associate with an ip
  - otherwise tries to resolve from dns setup in /etc/resolv.conf
    - format:
      - doman foo (this line optional, if left out will be the default for any domain)
      - search foo (list of domain names to try)
      - nameserver <ip> (ip of nameserver to query)
    - you can add a custom dns for a specific connection with nmcli con mod ID +ipv4.dns IP
* archiving and transferring
- tar -cf archivename filesToCompress to create archive
- tar -tf to list contents
- tar -xf to extract contents
- -f for filename to use
- -z for gzip
- -j for bzip
- -J or -xz to use xz (best compression)
- -p to preserve permissions instead of obeying umask
- to copy over ssh, use scp and for path on other computer use user@host:path
- use sftp for interactive remote file management
  - puts you in a session where you can use mkdir and cd and stuff directly on the host
  - use put [path] in sftp session to upload local file to server
  - use get [path] to download file
- rsync is good
* yum/redhat support
- support (all commands here start with subscription-manager)
  - register with ~subscription-manager register --username=foo --password=bar~
  - view subscriptions with ~subscription-manager list --available | less~
  - autoattach with ~attach --auto~
  - attach from specific pool with ~attach --pool=poolID~
  - view consumed subs with ~list --consumed~
  - unregister with ~unregister~
- rpms
  - filename format is name-version-release-arch.rpm
  - file contains the files to be installed, scripts to run on install/uninstall/update, and metadata (including deps)
  - file should usually be gpg signed
  - portage-like slotting is allowed for things like the kernel
  - ~rpm -q~ for query
    - -qa: list all installed packages
    - -qf file: find what package provides file
    - -q package: find version of package currently installed
    - -qi package: get info about the package
    - -ql package: list files that come from the package
    - -qc package: list conf files of package
    - -qd package: list documentation files
    - -q --scripts package: list scripts that run after package is installed or removed
    - -q --changelog package: show package changelog
  - rpm -ivh file.rpm to install package
- yum
  - list to show all packages
  - search to search name/summary
  - search all to also include description field
  - info package to show package info
  - provides path (wildcards allowed) to show packages providing files
  - install to install
  - update package to update a given package, or just update to update everything
  - remove to uninstall and remove reverse dependencies
  - groups are basically metapackages
    - group list to list groups
    - group info foo for group info
    - group install to install group
  - /var/log/dnf.rpm.log contains all install/remove transactions
  - yum history will also show this stuff
  - yum history undo N to undo N transactions
- yum repositories
  - yum repolist all to show repos
  - yum config-manager --enable repo to enable a given repo
  - yum config-manager --add-repo="url" to add 3rd party repo to list
- appstream
  - appstream is an official repo. basically contains programs or os components such as java or webserver stuff that can be updated more quickly than everything else. sign up for the webserver appstream or whatever to have up to date webserver stuff but have everything else be stable.
    - modules streams are groups of packages. each module can have multiple streams, each of which has different program versions
    - module profiles actually contain the packages of a module. If you don't install one of the profiles you get the default versions. Java always comes from the java module, but you can install a different profile from the java module to get different versions for java stuff
    - yum module list to list modules
      - add a module name to list its stream
    - yum module install foo to install module foo
    - yum module remove to remove. this can break stuff though
    - switch streams by removing, the module, run ~yum module reset foo~, then ~yum module install foo:versionNumber/profileName~
* file systems
- lsblk -fp to show uuid
- mount UUID="foo" /path/to/mountpoint
- lsof /path/to/mountpoint to show what processes are stopping unmounting
- locate uses the mlocate database to find files. It's instant but it needs the files to already be in the database.
  - database is updated every day, but you can manually update it with updatedb
  - automatically searches from root
  - -n 5 means show only 1st 5 matches
  - -i ignores case
- find
  - -iname is like name but ignores case
  - -user -group -uid and -gid match those user fields
  - -perm for permissions
    - -perm 764 only matches 764
    - -perm -764 matches at least. As long as each field has the permissions specified (and possibly others) it matches
    - -perm /764 means only 7 of the fields has to match at least. So as long as the value for others is at least 4 it matches
  - -size for sizes
    - prefix k M or G for kilo/mega/giga
    - 10M for 10 megabytes (rounded up)
    - +10M for more than 10
    - -10M for less than 10
  - -mmin for modification type
    - 120 for 120 minutes ago
    - +120 for more than
    - -120 for less than
  - -type [f,d,l,b] for file, dir, link, or block device respectively
  - -links 2 for files with 2 hardlinks. accepts + for more than and - for less than
* bash scripts
- double quotes allows variables and single quotes don't
- use ${foo} for var access in quotes
- ~echo "foo" >&2~ to output to stderr
- loop format:
#+begin_src sh
for VAR in LIST; do
    code
done
#+end_src
- LIST can be ~1 2 3~, ~{1..3}~ or ~*~ for all files in current dir
- ~exit n~ for exit code. Without an arg it uses the exit code of the most recent command
- ~test~ does conditionals
- ~[ foo ]~ also does conditionals
- ~[[ foo ]]~ uses newer syntax for conditionals
  - -eq for ==
  - -ne for !=
  - -gt for >
  - -ge for >=
  - -lt and le for less
  - = compares strings
  - != also compares strings
  - -z to test if string is empty
  - -n to test if string is not empty
- if syntax:
#+begin_src sh
if [ TEST ]; then
    code
elif [ TEST ]; then
    more code
else
    more code
fi
#+end_src
- in regex ~\{2\}~ is like * but only matches 2 chars
* cron
* tuning profile
- static tuning done with ~tuned~ and kernel parameters
- dynamic tuning done with ~tuned~
- profiles:
  - balanced: compromise
  - desktop: balanced but makes interactive programs faster
  - throughput-performance: max throughput
  - latency-performance: min latency (but uses a lot of power)
  - network-latency: latency-performance but adds network params
  - network-throughput: max network throughput
  - powersave
  - oracle: just for oracle databases
  - virtual-guest: best performance if system is running on a vm
  - virtual-host: best performance for vm host
- ~tuned-adm~ controls ~tuned~ settings
- commands (format is ~tuned-adm /COMMAND/~)
  - ~active~ shows current profile
  - ~list~ shows available profiles, including custom ones
  - ~profile /PROFILE-NAME/~ changes profile
  - ~recommend~ recommends a profile
  - ~off~ to turn off
- scheduling/niceness
  - niceness can be from -20 (highest priority) to 19 (lowest)
  - ~ps --sort=-nice~ sorts from highest to lowest niceness
  - ~nice -n /NUM/ /COMMAND/~ to run COMMAND with niceness of NUM
  - ~renice -n /NUM/ /PID/~ to change niceness of existing process
  - only root can decrease niceness
  - press r in top to change niceness too
* ACL
- basically just extends normal file permissions
- lets you give permissions to multiple users or groups
  - these are called named users and named groups
- users with ~CAP_FOWNER~ capability can set ACL's on any file or dir
- files inherit acls from parent dirs
- filesystems need to be mounted with acl support, but usually they are automatically mounted that way
- ~ls -l~ shows a + after permission string if there are ACLs
  - group permission shows mask setting
  - other permission should usually be none because only people with ACL permission should access them
  - show full ACL settings with ~getfacl /file/~
  - works on directory too
    - comments start with #
    - user format
      - starts with user::<permission> for owner
      - format is user:<username>:permissions
      - ends in #effective:rw- if executable permissions are masked
      - other::<permission> is default permission
      - mask::<permission> shows maximum permissions for every possible user
    - group permissions are the same but start with group instead of user
    - standard acl entry:
#+begin_example
user::rwx
user:consultant3:---
user:1005:rwx
group::rwx
group:consultant1:r-x
group:2210:rwx
mask::rwx
other::---
#+end_example
- default user entries
  - default:user::<permission> is default acl owner permission
  - default:user:<user>:permission is default for given user
  - default:mask::rxw is default mask
  - default:other::--- is default world permission
- groups are the same but use group instead of user
- acl mask only works on named users/groups and group owner, not on owner and other
- permission priority is owner > named user > group owner/named group > other
- systemd uses acls on certain files
- ~setfacl~ modifies acls
  - uses standard rwx for permissions
  - use X to give dirs +x but not files
  - ~setfacl -m~ reads from stdin
  - ~setfacl -m u:foo:rX~ sets permission for user foo
  - ~setfacl -M /file/~ reads from file
  - set multiple entries by separating them with a comma
  - ~setfacl -m u::rwx,g:consultants:rX,o::- /file/~
  - ~getfacl file-A | setfacl --set-file=- file-B~ to copy an acl to another file (the - means read file from stdin)
  - use ~-R~ to recursively set acl
  - ~setfacl -x u:foo~ to delete acl for user foo
  - ~setfacl -b /file/~ to delete all acls for a file
* SELinux 
** intro
- mostly controls access to files and resources
- controls permission for programs, not just users (i.e. can be opened by a text editor, but only written by a daemon)
- mostly is a containment system
- 3 modes:
  - enforcing: on
  - permissive: doesn't do anything but warns for violations. Used for testing and stuff
  - disabled: fully off
- if someone hijacks ssh or something, they can access everything the ~apache~ user can, which is a lot
- rules are called ~contexts~. They determine which processes can access a file, dir, or port
  - default context is always no
  - ~targed~ policy (redhat default) bases rules off of types
- policy anatomy:
  - ~unconfined_u:object_r:httpd_sys_content_t:s0/var/www/html/file2~
    1. SELinux User context
    2. role context
    3. type context
    4. s0 = sensitivity context
    5. rest is file
  - this lets anything with ~httpd_t~ type access ~file2~. This would allow webservers to access file2, but not anything else
- type usually ends in ~_t~
- most file commands use ~-Z~ to show SELinux contexts
- ~getenforce~ shows permission mode, and ~setenforce~ sets it
- change mode at boot time with ~enforcing=<1 || 0>~ kernel parameter
- conf file is ~/etc/selinux/config~
  
** managing contexts
- every process and file has a label
- all labels together make the context
- files inherit context from parent dir
- context won't reinherit from parent dir when a files is moved (use ~cp~ instead)
- ~cp -a~ can mess up selinux's idea of where the file is
- change context with ~chcon~
  - new files have type ~default_t~
  - ~chcon -t httpd_sys_content_t /file/~ to change it to httpd type
- ~restorecon /file/~ resets context to default (~-R~ for recursive)
- ~semanage fcontext -t /type/~ changes rules for restorecon to reset to
  - ~-a~ for add, ~-d~ for delete, and ~-l~ for list
  - uses extended regex for files
    - use ~(/.*)?~ instead of just ~*~
- looks like ~semanage~ and then ~restorecon~ is the best way to add new rules ~chcon~ is best for one-off tests?????
  
** booleans
- many large programs have SELinux policies
- man pages ending in ~_selinux~ have info on policies
  - find them with ~man -k _selinux~
- manage with ~getsebool~ and ~setsebool~
- ~getsebool~ format for setting is ~(/current setting/, /default setting/)~
- ~getsebool -a~ shows all bools
- ~setsebool -P~ makes setting persistent
- ~semanage boolean -l~ says whether setting is persistent or not
- ~semanage boolean -l -C~ to see all bools that are different from default state

** troubleshooting
- for denying access too much:
  - most common issue is incorrect file context, usually because of moving
    - fix it with ~restorecon~
  - then try looking at booleans
- monitoring violations:
  - install ~setroubleshoot-server~ to send violations to ~/var/log/messages~ instead of just ~/var/log/audit/audit.log~
#  LocalWords:  dirs rwx setfacl systemd acl rxw autocreated

* storage/permission
- gpt also backs up partition info at end of disk
  - also uses checksums
- ~mount~ with no options shows currently mounted devices
- ~systemctl daemon-reload~ will mount new ~fstab~ entries
- fstab format:
  - device mountpoint filesystem option1,option2... dump? fsck?
    - fsck options > 1 will be run in order
    - use 1 for ext4 root and 2 for all other ext4 file systems
- mount swap space with flag ~pri=/N/~ to dictate which should be use first
  - higher priorities are used first, and default is -2
  - ~swapon --show~ shows priorities

* LVM
- physical devices are what they seem like
- physical volumes (PVs) are devices or partitions which have been initialized into the lvm system
- volume groups (VGs) are a pool of PVs
  - it is the lvm equivalent of an entire disk
- logical volumes (LVs) are the lvm equivalent of partitions
- physical extents (PEs) are smallest unit of physical storage
- you can make partitions for lvm or you can use an entire disk
- ~pvcreate /partition1/ /partition2/ ...~ to prep devices for lvm
  - this turns them into PVs
- ~vgreate /name/ /PVs/~ to turn PVs into a volume group
  - if there is already a VG then you can just add PVs to it
- ~lvcreate -n /name/ -L /size/ /volumegroup/~
  - size can end in M or G for mega/gigabyte
- run ~mkfs.ext4 /dev/<vgName>/<lvName>~ to format it
- ~lvremove /path/to/lv~ to delete LV
- ~vgremove /vgName/~ to delete VG
- ~pvremove /pvNames/~ to delete PVs
- ~pvdisply /PV/~ to show PV info
- ~vgdisplay /VG/~ to show VG info
- ~lvdisplay /path/to/lv~ to show lv info
- growing a VG:
  - first make a PV by creating a partition and running ~pvcreate~
  - run ~vgextend /VG/ /PV/~ to add PV to the VG
- shrink with ~pvremove /PV/~ to remove a PV. There needs to be space on the other PVs to accommodate the data
- ~pvmove /PV/~ to move data from PV to other PVs without removing it
  - this one is kinda sketchy so back up first
- ~vgreduce /VG/ /PV/~ to remove PV from VG but still keep PV as a physical volume so it can be added to another VG
- growing a LV:
  - use vgdisplay to make sure there are enough extents available
  - ~lvextend -L +300M /LV/~
    - remove plus to dictate the absolute size of the LV
  - afterwards you *MUST* extend the filesystem
    - ~xfs_growfs~ for xfs
    - ~resize2fs~ fox ext4
    - to resize swap, ~swapoff~ before ~lvextend~, and just ~swapon~ after

* advanced storage
** stratis
- stratis is like lvm but more dynamic
  - partitions are put into pools and those pools can have multiple filesystems
  - the filesystems dynamically grow as more data is added to them
  - this lets you truly have filesystems that will auto grow and auto shrink so you don't have to resize them if 1 grows faster than the other or whatever
- stratis needs a daemon of course
- redhat packages are called stratis-cli and stratisd
  - after installing run ~systemctl enable --now stratisd~
- create pool with ~stratis pool create /name/ /device/~
- ~stratis pool list~ to list pools
- ~stratis blockdev list /pool/~ to show devices in pool
- ~stratis pool add-data /pool/ /device/~ to add a device to the pool
- ~stratis filesystem create /pool/ /filesystem/~
- ~stratis filesystem list~ to show supported fs types
- of course stratis breaks df and all that
- ~stratis filesystem snapshot /pool/ /fs/ /name/~ to create a snapshot named name
- example fstab entry: ~UUID=31b9363b-add8-4b46-a4bf-c199cd478c55 /dir1 xfs defaults,x-systemd.requires=stratisd.service 0 0~
- needs to have the systemd mount option
  
** VDO
- vdo is a driver include in rhel 8
- contains kvdo module to compress data and uds module for deduplication
- vdo reduces data footprint by eliminating blocks with only 0s, compression, and deduplication
- use this to create vdo volumes, which are like disk partitions
- enable by installing vdo and kmod-kvdo packages
- create with ~vdo create --name=/name/ --device=/partition/ --vdoLogicalSize=50G~ to turn partition into a 50G volume. You can change the size of the volume to be more than the partition because of compression. If no size is specified, it will just be 1:1
- you can then format and mount it like normal
- ~vdo status --name=/name/~ to show info about a volume
- ~vdo list~ to show all volumes

* nfs
- mount with ~mount -t nfs /host/://dir/ /mountpoint/~
- add nfs in options column for fstab to persistently mount
- autofs:
  - install autofs package
  - enable autofs service
  - add a master map file to ~/etc/auto.master.d/demo.autofs~
    - the file can be any name in that directory, just needs to end in ~.autofs~
    - should contain: ~/shares /etc/auto.demo~ to have /shares be the base dir for mounting, and to have /etc/auto.demo file contain the mount details
  - create auto.demo (or appropriate file)
    - format is:  ~key -options source~
      - key is mountpoint, autocreated under the base dir
      - options area starts with - and options are separated with commas
      - source is location of mountpoint, can be host:path
      - ~work -rw,sync serverb:/shares/work~ mounts serverb:/shares/work in <basdir>/work with rw and sync options

* boot
- get boot targets with ~systemctl list-units --type=target --all~
- common ones are graphical, multi-user (multiple text-only accounts), rescue, and emergency
- select a target with ~systemctl isolate multi-user.target~
- permanently select one with ~systemctl set-default graphical.target~
- to select target before boot, boot with ~systemd.unit=rescu.target~ kernel flag
  - edit parameters with e in grub

- if boot gets stuck due to jobs, boot to rescue or emergency target and run ~systemctl list-jobs~ in the terminal (on tty 9 in those modes)

- C-x boots from the area to edit kernel params
